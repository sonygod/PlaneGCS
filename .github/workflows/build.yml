name: C++ Build with Boost and Release

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Install latest emscripten and set environment variables
      run: |
        mkdir -p emsdk
        git clone https://github.com/emscripten-core/emsdk.git ./emsdk || echo "Clone failed"
        cd ./emsdk
        ./emsdk install latest
        ./emsdk activate latest
        echo "EMSDK_PATH=$(pwd)" >> $GITHUB_ENV
        echo "EMSDK=$(pwd)" >> $GITHUB_ENV
        echo "EM_CONFIG=${EMSDK}/.emscripten" >> $GITHUB_ENV
        echo "PATH=${EMSDK}:${EMSDK}/upstream/emscripten:${EMSDK}/node/14.15.5_64bit/bin:$PATH" >> $GITHUB_ENV
        cd ../    
    - name: Check emcc command
      run: |
       emcc --version || (echo "emcc not found" && exit 1)

    - name: Download Boost 1.84.0
      run: wget https://archives.boost.io/release/1.84.0/source/boost_1_84_0.tar.gz
      
    - name: Extract Boost Archive
      run: tar zxvf boost_1_84_0.tar.gz

    - name: Bootstrap Boost
      run: |
        cd boost_1_84_0
        ./bootstrap.sh --with-libraries=graph # or use "all" if needed

    - name: Build Boost with Emscripten Toolset
      run: |
        cd boost_1_84_0
        ./b2 toolset=emscripten link=static

    - name: Create Build Directory
      run: mkdir build

    - name: Compile Project
      run: |
        cd build
        emcmake cmake .. -DBOOST_ROOT=${GITHUB_WORKSPACE}/boost_1_84_0
        make -j4
    
    # Assuming the library is named libPlaneGCS.a and located in the build directory
    - name: Archive Library
      run: |
        cd build
        tar -cvzf libPlaneGCS.tar.gz libPlaneGCS.a

    - name: Get the current date for release tag
      id: date
      run: echo "::set-output name=date::$(date +'%Y%m%d%H%M%S')"
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.date.outputs.date }}
        release_name: Release-${{ steps.date.outputs.date }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/libPlaneGCS.tar.gz
        asset_name: libPlaneGCS-${{ steps.date.outputs.date }}.tar.gz
        asset_content_type: application/gzip
